/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ContractRegister,
  ContractRegisterInterface,
} from "../../../../contracts/utils/contractRegister/ContractRegister";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "contractByName",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "contracts",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
        ],
        internalType: "struct IContractRegister.ContractData[]",
        name: "contractsInfo",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "removeContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
    ],
    name: "setOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b503380603557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b603c816053565b50600180546001600160a01b0319163317905560a3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f2d806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80637dc0d1d01161007657806397623b581161005b57806397623b5814610181578063f2fde38b14610194578063f851a440146101a757600080fd5b80637dc0d1d0146101455780638da5cb5b1461016357600080fd5b80636c0f79b6116100a75780636c0f79b614610115578063715018a61461012a5780637adbf9731461013257600080fd5b80632b650151146100c35780633f0ed0df14610100575b600080fd5b6100d66100d13660046108a9565b6101c5565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61011361010e366004610914565b610206565b005b61011d610390565b6040516100f79190610968565b61011361053c565b610113610140366004610a6c565b610550565b60025473ffffffffffffffffffffffffffffffffffffffff166100d6565b60005473ffffffffffffffffffffffffffffffffffffffff166100d6565b61011361018f3660046108a9565b61059f565b6101136101a2366004610a6c565b6106e6565b60015473ffffffffffffffffffffffffffffffffffffffff166100d6565b6000600383836040516101d9929190610a8e565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff169392505050565b61020e61074a565b73ffffffffffffffffffffffffffffffffffffffff8116610290576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f43523a20616464722063616e6e6f74206265207a65726f20616464720000000060448201526064015b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600384846040516102ba929190610a8e565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff160361032457600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01610322838583610b6c565b505b8060038484604051610337929190610a8e565b908152604051908190036020019020805473ffffffffffffffffffffffffffffffffffffffff929092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179055505050565b60045460609067ffffffffffffffff8111156103ae576103ae610a9e565b6040519080825280602002602001820160405280156103f457816020015b6040805180820190915260608152600060208201528152602001906001900390816103cc5790505b5060045490915060005b818110156105375760405180604001604052806004838154811061042457610424610c86565b90600052602060002001805461043990610acd565b80601f016020809104026020016040519081016040528092919081815260200182805461046590610acd565b80156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b505050505081526020016003600484815481106104d1576104d1610c86565b906000526020600020016040516104e89190610d45565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff169052835184908390811061052457610524610c86565b60209081029190910101526001016103fe565b505090565b61054461074a565b61054e600061079d565b565b61055861074a565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6105a761074a565b600082826040516105b9929190610a8e565b60405190819003902060045490915060005b818110156106df5782600482815481106105e7576105e7610c86565b906000526020600020016040516105fe9190610d45565b6040518091039020036106d7576004610618600184610d51565b8154811061062857610628610c86565b906000526020600020016004828154811061064557610645610c86565b90600052602060002001908161065b9190610d91565b50600480548061066d5761066d610ec8565b6001900381819060005260206000200160006106899190610812565b90556003858560405161069d929190610a8e565b90815260405190819003602001902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556106df565b6001016105cb565b5050505050565b6106ee61074a565b73ffffffffffffffffffffffffffffffffffffffff811661073e576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610287565b6107478161079d565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461054e576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610287565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b50805461081e90610acd565b6000825580601f1061082e575050565b601f01602090049060005260206000209081019061074791905b8082111561085c5760008155600101610848565b5090565b60008083601f84011261087257600080fd5b50813567ffffffffffffffff81111561088a57600080fd5b6020830191508360208285010111156108a257600080fd5b9250929050565b600080602083850312156108bc57600080fd5b823567ffffffffffffffff8111156108d357600080fd5b6108df85828601610860565b90969095509350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461090f57600080fd5b919050565b60008060006040848603121561092957600080fd5b833567ffffffffffffffff81111561094057600080fd5b61094c86828701610860565b909450925061095f9050602085016108eb565b90509250925092565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015610a60577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805160408752805180604089015260005b818110156109ef57602081840181015160608b84010152016109d2565b5060006060828a01015273ffffffffffffffffffffffffffffffffffffffff602084015116602089015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168901019750505050602082019150602084019350600181019050610990565b50929695505050505050565b600060208284031215610a7e57600080fd5b610a87826108eb565b9392505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c90821680610ae157607f821691505b602082108103610b1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610b6757806000526020600020601f840160051c81016020851015610b475750805b601f840160051c820191505b818110156106df5760008155600101610b53565b505050565b67ffffffffffffffff831115610b8457610b84610a9e565b610b9883610b928354610acd565b83610b20565b6000601f841160018114610bea5760008515610bb45750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556106df565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015610c395786850135825560209485019460019092019101610c19565b5086821015610c74577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008154610cc281610acd565b600182168015610cd95760018114610d0c57610d3c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083168652811515820286019350610d3c565b84600052602060002060005b83811015610d3457815488820152600190910190602001610d18565b505081860193505b50505092915050565b6000610a878284610cb5565b81810381811115610d8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b818103610d9c575050565b610da68254610acd565b67ffffffffffffffff811115610dbe57610dbe610a9e565b610dd281610dcc8454610acd565b84610b20565b6000601f821160018114610e245760008315610dee5750848201545b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556106df565b6000858152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841690600086815260209020845b83811015610e7c5782860154825560019586019590910190602001610e5c565b5085831015610eb857818501547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220661d56d58ac0d11017e77b8b3ee3b85659782963e954eafb7d4b3cb950b8609e64736f6c634300081c0033";

type ContractRegisterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractRegisterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractRegister__factory extends ContractFactory {
  constructor(...args: ContractRegisterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ContractRegister & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ContractRegister__factory {
    return super.connect(runner) as ContractRegister__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractRegisterInterface {
    return new Interface(_abi) as ContractRegisterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ContractRegister {
    return new Contract(address, _abi, runner) as unknown as ContractRegister;
  }
}
