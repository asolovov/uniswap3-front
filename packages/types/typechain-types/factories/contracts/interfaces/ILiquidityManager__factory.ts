/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILiquidityManager,
  ILiquidityManagerInterface,
} from "../../../contracts/interfaces/ILiquidityManager";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenA",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenB",
            type: "address",
          },
        ],
        internalType: "struct ILiquidityManager.CollectFeesParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "collectFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenA",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenB",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountA",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountB",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidityManager.UpdatePositionParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "depositLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "provider",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenA",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenB",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maxBalanceA",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBalanceB",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidityManager.NewProviderParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "registerProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "provider",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenA",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenB",
            type: "address",
          },
        ],
        internalType: "struct ILiquidityManager.RemoveProviderParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "removeProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenA",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenB",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountA",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountB",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidityManager.UpdatePositionParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "withdrawLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ILiquidityManager__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidityManagerInterface {
    return new Interface(_abi) as ILiquidityManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ILiquidityManager {
    return new Contract(address, _abi, runner) as unknown as ILiquidityManager;
  }
}
