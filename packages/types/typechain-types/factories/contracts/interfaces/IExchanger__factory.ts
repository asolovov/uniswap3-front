/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IExchanger,
  IExchangerInterface,
} from "../../../contracts/interfaces/IExchanger";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IExchanger.ProtocolType",
        name: "protocol",
        type: "uint8",
      },
    ],
    name: "ProtocolActivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IExchanger.ProtocolType",
        name: "protocol",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "RouterSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum IExchanger.ProtocolType",
        name: "protocol",
        type: "uint8",
      },
    ],
    name: "activateProtocol",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "id",
        type: "uint128",
      },
    ],
    name: "closeOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "encodeExactInputSingleParams",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timeout",
            type: "uint256",
          },
        ],
        internalType: "struct IOrderRouter.SubmitOrderParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "encodeSubmitOrderParams",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "exchangeParams",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IExchanger.ProtocolType",
        name: "protocol",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "setProtocolRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IExchanger__factory {
  static readonly abi = _abi;
  static createInterface(): IExchangerInterface {
    return new Interface(_abi) as IExchangerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IExchanger {
    return new Contract(address, _abi, runner) as unknown as IExchanger;
  }
}
