/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPairFactory,
  IPairFactoryInterface,
} from "../../../contracts/interfaces/IPairFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "NewPair",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    name: "NewPairState",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "bool",
        name: "state",
        type: "bool",
      },
    ],
    name: "changePairState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "deployPair",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllPairs",
    outputs: [
      {
        internalType: "address[]",
        name: "pairs",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPairParams",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPeripheryContracts",
    outputs: [
      {
        internalType: "address",
        name: "priceManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "liquidityManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "orderRouter",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newPriceManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOrderRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "newLiquidityManager",
        type: "address",
      },
    ],
    name: "setPeripheryContracts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPairFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IPairFactoryInterface {
    return new Interface(_abi) as IPairFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPairFactory {
    return new Contract(address, _abi, runner) as unknown as IPairFactory;
  }
}
