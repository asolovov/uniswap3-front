/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IOrderRouter {
  export type CloseOrderParamsStruct = {
    owner: AddressLike;
    tokenA: AddressLike;
    tokenB: AddressLike;
    id: BigNumberish;
  };

  export type CloseOrderParamsStructOutput = [
    owner: string,
    tokenA: string,
    tokenB: string,
    id: bigint
  ] & { owner: string; tokenA: string; tokenB: string; id: bigint };

  export type SubmitOrderParamsStruct = {
    owner: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    timeout: BigNumberish;
  };

  export type SubmitOrderParamsStructOutput = [
    owner: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    timeout: bigint
  ] & {
    owner: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    timeout: bigint;
  };
}

export interface IOrderRouterInterface extends Interface {
  getFunction(
    nameOrSignature: "closeOrder" | "setOrderMaxTimeout" | "submitOrder"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewOrderMaxTimeout"): EventFragment;

  encodeFunctionData(
    functionFragment: "closeOrder",
    values: [IOrderRouter.CloseOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderMaxTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [IOrderRouter.SubmitOrderParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOrderMaxTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;
}

export namespace NewOrderMaxTimeoutEvent {
  export type InputTuple = [timeout: BigNumberish];
  export type OutputTuple = [timeout: bigint];
  export interface OutputObject {
    timeout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOrderRouter extends BaseContract {
  connect(runner?: ContractRunner | null): IOrderRouter;
  waitForDeployment(): Promise<this>;

  interface: IOrderRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeOrder: TypedContractMethod<
    [params: IOrderRouter.CloseOrderParamsStruct],
    [void],
    "nonpayable"
  >;

  setOrderMaxTimeout: TypedContractMethod<
    [timeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitOrder: TypedContractMethod<
    [params: IOrderRouter.SubmitOrderParamsStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeOrder"
  ): TypedContractMethod<
    [params: IOrderRouter.CloseOrderParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOrderMaxTimeout"
  ): TypedContractMethod<[timeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitOrder"
  ): TypedContractMethod<
    [params: IOrderRouter.SubmitOrderParamsStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewOrderMaxTimeout"
  ): TypedContractEvent<
    NewOrderMaxTimeoutEvent.InputTuple,
    NewOrderMaxTimeoutEvent.OutputTuple,
    NewOrderMaxTimeoutEvent.OutputObject
  >;

  filters: {
    "NewOrderMaxTimeout(uint256)": TypedContractEvent<
      NewOrderMaxTimeoutEvent.InputTuple,
      NewOrderMaxTimeoutEvent.OutputTuple,
      NewOrderMaxTimeoutEvent.OutputObject
    >;
    NewOrderMaxTimeout: TypedContractEvent<
      NewOrderMaxTimeoutEvent.InputTuple,
      NewOrderMaxTimeoutEvent.OutputTuple,
      NewOrderMaxTimeoutEvent.OutputObject
    >;
  };
}
