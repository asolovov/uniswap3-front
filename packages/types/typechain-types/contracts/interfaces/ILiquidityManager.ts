/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ILiquidityManager {
  export type CollectFeesParamsStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
  };

  export type CollectFeesParamsStructOutput = [
    tokenA: string,
    tokenB: string
  ] & { tokenA: string; tokenB: string };

  export type UpdatePositionParamsStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    amountA: BigNumberish;
    amountB: BigNumberish;
  };

  export type UpdatePositionParamsStructOutput = [
    tokenA: string,
    tokenB: string,
    amountA: bigint,
    amountB: bigint
  ] & { tokenA: string; tokenB: string; amountA: bigint; amountB: bigint };

  export type NewProviderParamsStruct = {
    provider: AddressLike;
    tokenA: AddressLike;
    tokenB: AddressLike;
    maxBalanceA: BigNumberish;
    maxBalanceB: BigNumberish;
  };

  export type NewProviderParamsStructOutput = [
    provider: string,
    tokenA: string,
    tokenB: string,
    maxBalanceA: bigint,
    maxBalanceB: bigint
  ] & {
    provider: string;
    tokenA: string;
    tokenB: string;
    maxBalanceA: bigint;
    maxBalanceB: bigint;
  };

  export type RemoveProviderParamsStruct = {
    provider: AddressLike;
    tokenA: AddressLike;
    tokenB: AddressLike;
  };

  export type RemoveProviderParamsStructOutput = [
    provider: string,
    tokenA: string,
    tokenB: string
  ] & { provider: string; tokenA: string; tokenB: string };
}

export interface ILiquidityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collectFees"
      | "depositLiquidity"
      | "registerProvider"
      | "removeProvider"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectFees",
    values: [ILiquidityManager.CollectFeesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values: [ILiquidityManager.UpdatePositionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProvider",
    values: [ILiquidityManager.NewProviderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProvider",
    values: [ILiquidityManager.RemoveProviderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [ILiquidityManager.UpdatePositionParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export interface ILiquidityManager extends BaseContract {
  connect(runner?: ContractRunner | null): ILiquidityManager;
  waitForDeployment(): Promise<this>;

  interface: ILiquidityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collectFees: TypedContractMethod<
    [params: ILiquidityManager.CollectFeesParamsStruct],
    [void],
    "nonpayable"
  >;

  depositLiquidity: TypedContractMethod<
    [params: ILiquidityManager.UpdatePositionParamsStruct],
    [void],
    "nonpayable"
  >;

  registerProvider: TypedContractMethod<
    [params: ILiquidityManager.NewProviderParamsStruct],
    [void],
    "nonpayable"
  >;

  removeProvider: TypedContractMethod<
    [params: ILiquidityManager.RemoveProviderParamsStruct],
    [void],
    "nonpayable"
  >;

  withdrawLiquidity: TypedContractMethod<
    [params: ILiquidityManager.UpdatePositionParamsStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<
    [params: ILiquidityManager.CollectFeesParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositLiquidity"
  ): TypedContractMethod<
    [params: ILiquidityManager.UpdatePositionParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerProvider"
  ): TypedContractMethod<
    [params: ILiquidityManager.NewProviderParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeProvider"
  ): TypedContractMethod<
    [params: ILiquidityManager.RemoveProviderParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [params: ILiquidityManager.UpdatePositionParamsStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
