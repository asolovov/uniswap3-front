/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISwapRouter {
  export type ExactInputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    deadline: BigNumberish;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactInputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    deadline: bigint,
    amountIn: bigint,
    amountOutMinimum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    deadline: bigint;
    amountIn: bigint;
    amountOutMinimum: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export declare namespace IOrderRouter {
  export type SubmitOrderParamsStruct = {
    owner: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    timeout: BigNumberish;
  };

  export type SubmitOrderParamsStructOutput = [
    owner: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    timeout: bigint
  ] & {
    owner: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    timeout: bigint;
  };
}

export interface IExchangerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateProtocol"
      | "closeOrder"
      | "encodeExactInputSingleParams"
      | "encodeSubmitOrderParams"
      | "execute"
      | "setProtocolRouter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProtocolActivated" | "RouterSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateProtocol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeOrder",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeExactInputSingleParams",
    values: [ISwapRouter.ExactInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSubmitOrderParams",
    values: [IOrderRouter.SubmitOrderParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setProtocolRouter",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeExactInputSingleParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSubmitOrderParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolRouter",
    data: BytesLike
  ): Result;
}

export namespace ProtocolActivatedEvent {
  export type InputTuple = [protocol: BigNumberish];
  export type OutputTuple = [protocol: bigint];
  export interface OutputObject {
    protocol: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterSetEvent {
  export type InputTuple = [protocol: BigNumberish, router: AddressLike];
  export type OutputTuple = [protocol: bigint, router: string];
  export interface OutputObject {
    protocol: bigint;
    router: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IExchanger extends BaseContract {
  connect(runner?: ContractRunner | null): IExchanger;
  waitForDeployment(): Promise<this>;

  interface: IExchangerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateProtocol: TypedContractMethod<
    [protocol: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeOrder: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  encodeExactInputSingleParams: TypedContractMethod<
    [params: ISwapRouter.ExactInputSingleParamsStruct],
    [string],
    "view"
  >;

  encodeSubmitOrderParams: TypedContractMethod<
    [params: IOrderRouter.SubmitOrderParamsStruct],
    [string],
    "view"
  >;

  execute: TypedContractMethod<[exchangeParams: BytesLike], [void], "payable">;

  setProtocolRouter: TypedContractMethod<
    [protocol: BigNumberish, router: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateProtocol"
  ): TypedContractMethod<[protocol: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeOrder"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encodeExactInputSingleParams"
  ): TypedContractMethod<
    [params: ISwapRouter.ExactInputSingleParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeSubmitOrderParams"
  ): TypedContractMethod<
    [params: IOrderRouter.SubmitOrderParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[exchangeParams: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "setProtocolRouter"
  ): TypedContractMethod<
    [protocol: BigNumberish, router: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProtocolActivated"
  ): TypedContractEvent<
    ProtocolActivatedEvent.InputTuple,
    ProtocolActivatedEvent.OutputTuple,
    ProtocolActivatedEvent.OutputObject
  >;
  getEvent(
    key: "RouterSet"
  ): TypedContractEvent<
    RouterSetEvent.InputTuple,
    RouterSetEvent.OutputTuple,
    RouterSetEvent.OutputObject
  >;

  filters: {
    "ProtocolActivated(uint8)": TypedContractEvent<
      ProtocolActivatedEvent.InputTuple,
      ProtocolActivatedEvent.OutputTuple,
      ProtocolActivatedEvent.OutputObject
    >;
    ProtocolActivated: TypedContractEvent<
      ProtocolActivatedEvent.InputTuple,
      ProtocolActivatedEvent.OutputTuple,
      ProtocolActivatedEvent.OutputObject
    >;

    "RouterSet(uint8,address)": TypedContractEvent<
      RouterSetEvent.InputTuple,
      RouterSetEvent.OutputTuple,
      RouterSetEvent.OutputObject
    >;
    RouterSet: TypedContractEvent<
      RouterSetEvent.InputTuple,
      RouterSetEvent.OutputTuple,
      RouterSetEvent.OutputObject
    >;
  };
}
