/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ITokenPair {
  export type OrderStruct = {
    owner: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amount: BigNumberish;
    deadline: BigNumberish;
  };

  export type OrderStructOutput = [
    owner: string,
    tokenIn: string,
    tokenOut: string,
    amount: bigint,
    deadline: bigint
  ] & {
    owner: string;
    tokenIn: string;
    tokenOut: string;
    amount: bigint;
    deadline: bigint;
  };

  export type ProviderStruct = {
    addr: AddressLike;
    maxBalance0: BigNumberish;
    maxBalance1: BigNumberish;
    balance0: BigNumberish;
    balance1: BigNumberish;
    fees0: BigNumberish;
    fees1: BigNumberish;
  };

  export type ProviderStructOutput = [
    addr: string,
    maxBalance0: bigint,
    maxBalance1: bigint,
    balance0: bigint,
    balance1: bigint,
    fees0: bigint,
    fees1: bigint
  ] & {
    addr: string;
    maxBalance0: bigint;
    maxBalance1: bigint;
    balance0: bigint;
    balance1: bigint;
    fees0: bigint;
    fees1: bigint;
  };

  export type PairStruct = {
    pair: AddressLike;
    token0: AddressLike;
    token1: AddressLike;
    liquidity0: BigNumberish;
    liquidity1: BigNumberish;
    price0: BigNumberish;
    price1: BigNumberish;
    fee: BigNumberish;
    active: boolean;
  };

  export type PairStructOutput = [
    pair: string,
    token0: string,
    token1: string,
    liquidity0: bigint,
    liquidity1: bigint,
    price0: bigint,
    price1: bigint,
    fee: bigint,
    active: boolean
  ] & {
    pair: string;
    token0: string;
    token1: string;
    liquidity0: bigint;
    liquidity1: bigint;
    price0: bigint;
    price1: bigint;
    fee: bigint;
    active: boolean;
  };
}

export interface ITokenPairInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeOrder"
      | "collectFees"
      | "depositLiquidity"
      | "getOrder"
      | "getPrice"
      | "getProviderData"
      | "getProviders"
      | "getQueuedOrders"
      | "pairData"
      | "registerProvider"
      | "removeProvider"
      | "setState"
      | "submitOrder"
      | "token0"
      | "token1"
      | "updatePrice"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewPrice"
      | "OrderClosed"
      | "OrderNewState"
      | "OrderSubmitted"
      | "ProviderNewState"
      | "ProviderRegistered"
      | "ProviderRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "closeOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProviderData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedOrders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerProvider",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setState", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProviderData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace NewPriceEvent {
  export type InputTuple = [price: BigNumberish];
  export type OutputTuple = [price: bigint];
  export interface OutputObject {
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderClosedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderNewStateEvent {
  export type InputTuple = [id: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [id: bigint, amount: bigint];
  export interface OutputObject {
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderSubmittedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    owner: string,
    tokenIn: string,
    tokenOut: string,
    amount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    id: bigint;
    owner: string;
    tokenIn: string;
    tokenOut: string;
    amount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderNewStateEvent {
  export type InputTuple = [
    provider: AddressLike,
    balance0: BigNumberish,
    balance1: BigNumberish,
    fees0: BigNumberish,
    fees1: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    balance0: bigint,
    balance1: bigint,
    fees0: bigint,
    fees1: bigint
  ];
  export interface OutputObject {
    provider: string;
    balance0: bigint;
    balance1: bigint;
    fees0: bigint;
    fees1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderRegisteredEvent {
  export type InputTuple = [
    provider: AddressLike,
    maxBalance0: BigNumberish,
    maxBalance1: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    maxBalance0: bigint,
    maxBalance1: bigint
  ];
  export interface OutputObject {
    provider: string;
    maxBalance0: bigint;
    maxBalance1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderRemovedEvent {
  export type InputTuple = [
    provider: AddressLike,
    returnedBalance0: BigNumberish,
    returnedBalance1: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    returnedBalance0: bigint,
    returnedBalance1: bigint
  ];
  export interface OutputObject {
    provider: string;
    returnedBalance0: bigint;
    returnedBalance1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITokenPair extends BaseContract {
  connect(runner?: ContractRunner | null): ITokenPair;
  waitForDeployment(): Promise<this>;

  interface: ITokenPairInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeOrder: TypedContractMethod<
    [owner: AddressLike, orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectFees: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  depositLiquidity: TypedContractMethod<
    [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOrder: TypedContractMethod<
    [id: BigNumberish],
    [ITokenPair.OrderStructOutput],
    "view"
  >;

  getPrice: TypedContractMethod<[], [bigint], "view">;

  getProviderData: TypedContractMethod<
    [provider: AddressLike],
    [ITokenPair.ProviderStructOutput],
    "view"
  >;

  getProviders: TypedContractMethod<
    [],
    [ITokenPair.ProviderStructOutput[]],
    "view"
  >;

  getQueuedOrders: TypedContractMethod<
    [],
    [ITokenPair.OrderStructOutput[]],
    "view"
  >;

  pairData: TypedContractMethod<[], [ITokenPair.PairStructOutput], "view">;

  registerProvider: TypedContractMethod<
    [
      provider: AddressLike,
      maxBalance0: BigNumberish,
      maxBalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeProvider: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  setState: TypedContractMethod<[state: boolean], [void], "nonpayable">;

  submitOrder: TypedContractMethod<
    [
      owner: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      timeout: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  updatePrice: TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;

  withdrawLiquidity: TypedContractMethod<
    [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeOrder"
  ): TypedContractMethod<
    [owner: AddressLike, orderId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositLiquidity"
  ): TypedContractMethod<
    [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [id: BigNumberish],
    [ITokenPair.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProviderData"
  ): TypedContractMethod<
    [provider: AddressLike],
    [ITokenPair.ProviderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProviders"
  ): TypedContractMethod<[], [ITokenPair.ProviderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getQueuedOrders"
  ): TypedContractMethod<[], [ITokenPair.OrderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "pairData"
  ): TypedContractMethod<[], [ITokenPair.PairStructOutput], "view">;
  getFunction(
    nameOrSignature: "registerProvider"
  ): TypedContractMethod<
    [
      provider: AddressLike,
      maxBalance0: BigNumberish,
      maxBalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeProvider"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setState"
  ): TypedContractMethod<[state: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitOrder"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      timeout: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewPrice"
  ): TypedContractEvent<
    NewPriceEvent.InputTuple,
    NewPriceEvent.OutputTuple,
    NewPriceEvent.OutputObject
  >;
  getEvent(
    key: "OrderClosed"
  ): TypedContractEvent<
    OrderClosedEvent.InputTuple,
    OrderClosedEvent.OutputTuple,
    OrderClosedEvent.OutputObject
  >;
  getEvent(
    key: "OrderNewState"
  ): TypedContractEvent<
    OrderNewStateEvent.InputTuple,
    OrderNewStateEvent.OutputTuple,
    OrderNewStateEvent.OutputObject
  >;
  getEvent(
    key: "OrderSubmitted"
  ): TypedContractEvent<
    OrderSubmittedEvent.InputTuple,
    OrderSubmittedEvent.OutputTuple,
    OrderSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderNewState"
  ): TypedContractEvent<
    ProviderNewStateEvent.InputTuple,
    ProviderNewStateEvent.OutputTuple,
    ProviderNewStateEvent.OutputObject
  >;
  getEvent(
    key: "ProviderRegistered"
  ): TypedContractEvent<
    ProviderRegisteredEvent.InputTuple,
    ProviderRegisteredEvent.OutputTuple,
    ProviderRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProviderRemoved"
  ): TypedContractEvent<
    ProviderRemovedEvent.InputTuple,
    ProviderRemovedEvent.OutputTuple,
    ProviderRemovedEvent.OutputObject
  >;

  filters: {
    "NewPrice(uint256)": TypedContractEvent<
      NewPriceEvent.InputTuple,
      NewPriceEvent.OutputTuple,
      NewPriceEvent.OutputObject
    >;
    NewPrice: TypedContractEvent<
      NewPriceEvent.InputTuple,
      NewPriceEvent.OutputTuple,
      NewPriceEvent.OutputObject
    >;

    "OrderClosed(uint128)": TypedContractEvent<
      OrderClosedEvent.InputTuple,
      OrderClosedEvent.OutputTuple,
      OrderClosedEvent.OutputObject
    >;
    OrderClosed: TypedContractEvent<
      OrderClosedEvent.InputTuple,
      OrderClosedEvent.OutputTuple,
      OrderClosedEvent.OutputObject
    >;

    "OrderNewState(uint128,uint256)": TypedContractEvent<
      OrderNewStateEvent.InputTuple,
      OrderNewStateEvent.OutputTuple,
      OrderNewStateEvent.OutputObject
    >;
    OrderNewState: TypedContractEvent<
      OrderNewStateEvent.InputTuple,
      OrderNewStateEvent.OutputTuple,
      OrderNewStateEvent.OutputObject
    >;

    "OrderSubmitted(uint128,address,address,address,uint256,uint256)": TypedContractEvent<
      OrderSubmittedEvent.InputTuple,
      OrderSubmittedEvent.OutputTuple,
      OrderSubmittedEvent.OutputObject
    >;
    OrderSubmitted: TypedContractEvent<
      OrderSubmittedEvent.InputTuple,
      OrderSubmittedEvent.OutputTuple,
      OrderSubmittedEvent.OutputObject
    >;

    "ProviderNewState(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ProviderNewStateEvent.InputTuple,
      ProviderNewStateEvent.OutputTuple,
      ProviderNewStateEvent.OutputObject
    >;
    ProviderNewState: TypedContractEvent<
      ProviderNewStateEvent.InputTuple,
      ProviderNewStateEvent.OutputTuple,
      ProviderNewStateEvent.OutputObject
    >;

    "ProviderRegistered(address,uint256,uint256)": TypedContractEvent<
      ProviderRegisteredEvent.InputTuple,
      ProviderRegisteredEvent.OutputTuple,
      ProviderRegisteredEvent.OutputObject
    >;
    ProviderRegistered: TypedContractEvent<
      ProviderRegisteredEvent.InputTuple,
      ProviderRegisteredEvent.OutputTuple,
      ProviderRegisteredEvent.OutputObject
    >;

    "ProviderRemoved(address,uint256,uint256)": TypedContractEvent<
      ProviderRemovedEvent.InputTuple,
      ProviderRemovedEvent.OutputTuple,
      ProviderRemovedEvent.OutputObject
    >;
    ProviderRemoved: TypedContractEvent<
      ProviderRemovedEvent.InputTuple,
      ProviderRemovedEvent.OutputTuple,
      ProviderRemovedEvent.OutputObject
    >;
  };
}
