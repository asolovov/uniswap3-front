/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDexStructs {
  export type PairStruct = {
    pairContract: AddressLike;
    token0: AddressLike;
    token1: AddressLike;
    liquidity0: BigNumberish;
    liquidity1: BigNumberish;
    price0: BigNumberish;
    price1: BigNumberish;
    fee: BigNumberish;
    active: boolean;
  };

  export type PairStructOutput = [
    pairContract: string,
    token0: string,
    token1: string,
    liquidity0: bigint,
    liquidity1: bigint,
    price0: bigint,
    price1: bigint,
    fee: bigint,
    active: boolean
  ] & {
    pairContract: string;
    token0: string;
    token1: string;
    liquidity0: bigint;
    liquidity1: bigint;
    price0: bigint;
    price1: bigint;
    fee: bigint;
    active: boolean;
  };

  export type OrderStruct = {
    owner: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amount: BigNumberish;
    deadline: BigNumberish;
  };

  export type OrderStructOutput = [
    owner: string,
    tokenIn: string,
    tokenOut: string,
    amount: bigint,
    deadline: bigint
  ] & {
    owner: string;
    tokenIn: string;
    tokenOut: string;
    amount: bigint;
    deadline: bigint;
  };

  export type ProviderStruct = {
    addr: AddressLike;
    maxBalance0: BigNumberish;
    maxBalance1: BigNumberish;
    balance0: BigNumberish;
    balance1: BigNumberish;
    fees0: BigNumberish;
    fees1: BigNumberish;
  };

  export type ProviderStructOutput = [
    addr: string,
    maxBalance0: bigint,
    maxBalance1: bigint,
    balance0: bigint,
    balance1: bigint,
    fees0: bigint,
    fees1: bigint
  ] & {
    addr: string;
    maxBalance0: bigint;
    maxBalance1: bigint;
    balance0: bigint;
    balance1: bigint;
    fees0: bigint;
    fees1: bigint;
  };
}

export interface DexInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "PAIR_MANAGER"
      | "PROVIDER_MANAGER"
      | "addProvider"
      | "changePairState"
      | "closeOrder"
      | "collectFees"
      | "depositLiquidity"
      | "getAllPairs"
      | "getNewPairParams"
      | "getOrder"
      | "getPair"
      | "getPairData"
      | "getProvider"
      | "getProviders"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "init"
      | "newPair"
      | "orderMaxTimeout"
      | "priceManager"
      | "removeProvider"
      | "renounceRole"
      | "revokeRole"
      | "setOrderMaxTimeout"
      | "setPriceManager"
      | "submitOrder"
      | "supportsInterface"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "NewMaxTimeout"
      | "NewPair"
      | "NewPairState"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAIR_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROVIDER_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProvider",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePairState",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "closeOrder",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewPairParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviders",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newPair",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderMaxTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeProvider",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderMaxTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAIR_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROVIDER_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePairState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewPairParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderMaxTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOrderMaxTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMaxTimeoutEvent {
  export type InputTuple = [timeout: BigNumberish];
  export type OutputTuple = [timeout: bigint];
  export interface OutputObject {
    timeout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPairEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    pair: AddressLike
  ];
  export type OutputTuple = [token0: string, token1: string, pair: string];
  export interface OutputObject {
    token0: string;
    token1: string;
    pair: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPairStateEvent {
  export type InputTuple = [pair: AddressLike, isActive: boolean];
  export type OutputTuple = [pair: string, isActive: boolean];
  export interface OutputObject {
    pair: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Dex extends BaseContract {
  connect(runner?: ContractRunner | null): Dex;
  waitForDeployment(): Promise<this>;

  interface: DexInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PAIR_MANAGER: TypedContractMethod<[], [string], "view">;

  PROVIDER_MANAGER: TypedContractMethod<[], [string], "view">;

  addProvider: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      provider: AddressLike,
      allowedMaxBalance0: BigNumberish,
      allowedMaxBalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  changePairState: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;

  closeOrder: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectFees: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [void],
    "nonpayable"
  >;

  depositLiquidity: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAllPairs: TypedContractMethod<
    [],
    [IDexStructs.PairStructOutput[]],
    "view"
  >;

  getNewPairParams: TypedContractMethod<[], [[string, string, bigint]], "view">;

  getOrder: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, id: BigNumberish],
    [IDexStructs.OrderStructOutput],
    "view"
  >;

  getPair: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [string],
    "view"
  >;

  getPairData: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [IDexStructs.PairStructOutput],
    "view"
  >;

  getProvider: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, providerAddress: AddressLike],
    [IDexStructs.ProviderStructOutput],
    "view"
  >;

  getProviders: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [IDexStructs.ProviderStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  init: TypedContractMethod<
    [
      admin: AddressLike,
      pairManager: AddressLike,
      providerManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  newPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, fee: BigNumberish],
    [string],
    "nonpayable"
  >;

  orderMaxTimeout: TypedContractMethod<[], [bigint], "view">;

  priceManager: TypedContractMethod<[], [string], "view">;

  removeProvider: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, provider: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setOrderMaxTimeout: TypedContractMethod<
    [newTimeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceManager: TypedContractMethod<
    [newPriceManager: AddressLike],
    [void],
    "nonpayable"
  >;

  submitOrder: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      timeout: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  withdrawLiquidity: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAIR_MANAGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROVIDER_MANAGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addProvider"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      provider: AddressLike,
      allowedMaxBalance0: BigNumberish,
      allowedMaxBalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePairState"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeOrder"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositLiquidity"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllPairs"
  ): TypedContractMethod<[], [IDexStructs.PairStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getNewPairParams"
  ): TypedContractMethod<[], [[string, string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, id: BigNumberish],
    [IDexStructs.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairData"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [IDexStructs.PairStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProvider"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, providerAddress: AddressLike],
    [IDexStructs.ProviderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProviders"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [IDexStructs.ProviderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [
      admin: AddressLike,
      pairManager: AddressLike,
      providerManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, fee: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderMaxTimeout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeProvider"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, provider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOrderMaxTimeout"
  ): TypedContractMethod<[newTimeout: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceManager"
  ): TypedContractMethod<[newPriceManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitOrder"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      timeout: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewMaxTimeout"
  ): TypedContractEvent<
    NewMaxTimeoutEvent.InputTuple,
    NewMaxTimeoutEvent.OutputTuple,
    NewMaxTimeoutEvent.OutputObject
  >;
  getEvent(
    key: "NewPair"
  ): TypedContractEvent<
    NewPairEvent.InputTuple,
    NewPairEvent.OutputTuple,
    NewPairEvent.OutputObject
  >;
  getEvent(
    key: "NewPairState"
  ): TypedContractEvent<
    NewPairStateEvent.InputTuple,
    NewPairStateEvent.OutputTuple,
    NewPairStateEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewMaxTimeout(uint256)": TypedContractEvent<
      NewMaxTimeoutEvent.InputTuple,
      NewMaxTimeoutEvent.OutputTuple,
      NewMaxTimeoutEvent.OutputObject
    >;
    NewMaxTimeout: TypedContractEvent<
      NewMaxTimeoutEvent.InputTuple,
      NewMaxTimeoutEvent.OutputTuple,
      NewMaxTimeoutEvent.OutputObject
    >;

    "NewPair(address,address,address)": TypedContractEvent<
      NewPairEvent.InputTuple,
      NewPairEvent.OutputTuple,
      NewPairEvent.OutputObject
    >;
    NewPair: TypedContractEvent<
      NewPairEvent.InputTuple,
      NewPairEvent.OutputTuple,
      NewPairEvent.OutputObject
    >;

    "NewPairState(address,bool)": TypedContractEvent<
      NewPairStateEvent.InputTuple,
      NewPairStateEvent.OutputTuple,
      NewPairStateEvent.OutputObject
    >;
    NewPairState: TypedContractEvent<
      NewPairStateEvent.InputTuple,
      NewPairStateEvent.OutputTuple,
      NewPairStateEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
