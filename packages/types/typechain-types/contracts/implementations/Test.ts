/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getNodePrev"
      | "getUintPrev"
      | "setMap"
      | "setNode"
      | "setNum"
      | "setUint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getNodePrev",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUintPrev",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNode",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNodePrev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUintPrev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUint", data: BytesLike): Result;
}

export interface Test extends BaseContract {
  connect(runner?: ContractRunner | null): Test;
  waitForDeployment(): Promise<this>;

  interface: TestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNodePrev: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getUintPrev: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;

  setMap: TypedContractMethod<
    [a: AddressLike, num: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNode: TypedContractMethod<
    [id: BigNumberish, num: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNum: TypedContractMethod<[num: BigNumberish], [void], "nonpayable">;

  setUint: TypedContractMethod<
    [id: BigNumberish, num: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNodePrev"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUintPrev"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMap"
  ): TypedContractMethod<
    [a: AddressLike, num: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNode"
  ): TypedContractMethod<
    [id: BigNumberish, num: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNum"
  ): TypedContractMethod<[num: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUint"
  ): TypedContractMethod<
    [id: BigNumberish, num: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
