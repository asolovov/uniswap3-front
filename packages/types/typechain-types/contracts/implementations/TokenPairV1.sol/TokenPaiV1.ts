/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDexStructs {
  export type OrderStruct = {
    id: BigNumberish;
    owner: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amount: BigNumberish;
    deadline: BigNumberish;
  };

  export type OrderStructOutput = [
    id: bigint,
    owner: string,
    tokenIn: string,
    tokenOut: string,
    amount: bigint,
    deadline: bigint
  ] & {
    id: bigint;
    owner: string;
    tokenIn: string;
    tokenOut: string;
    amount: bigint;
    deadline: bigint;
  };

  export type ProviderStruct = {
    addr: AddressLike;
    maxBalance0: BigNumberish;
    maxBalance1: BigNumberish;
    balance0: BigNumberish;
    balance1: BigNumberish;
    royalty0: BigNumberish;
    royalty1: BigNumberish;
    share: BigNumberish;
  };

  export type ProviderStructOutput = [
    addr: string,
    maxBalance0: bigint,
    maxBalance1: bigint,
    balance0: bigint,
    balance1: bigint,
    royalty0: bigint,
    royalty1: bigint,
    share: bigint
  ] & {
    addr: string;
    maxBalance0: bigint;
    maxBalance1: bigint;
    balance0: bigint;
    balance1: bigint;
    royalty0: bigint;
    royalty1: bigint;
    share: bigint;
  };

  export type PairStruct = {
    pairContract: AddressLike;
    tkn0: AddressLike;
    tkn1: AddressLike;
    liquidity0: BigNumberish;
    liquidity1: BigNumberish;
    price0: BigNumberish;
    price1: BigNumberish;
    active: boolean;
  };

  export type PairStructOutput = [
    pairContract: string,
    tkn0: string,
    tkn1: string,
    liquidity0: bigint,
    liquidity1: bigint,
    price0: bigint,
    price1: bigint,
    active: boolean
  ] & {
    pairContract: string;
    tkn0: string;
    tkn1: string;
    liquidity0: bigint;
    liquidity1: bigint;
    price0: bigint;
    price1: bigint;
    active: boolean;
  };
}

export interface TokenPaiV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProvider"
      | "claimRoyalty"
      | "closeOrder"
      | "commitOrder"
      | "depositLiquidity"
      | "getOrder"
      | "getProviderData"
      | "getProviders"
      | "getQueuedOrders"
      | "isActive"
      | "pairData"
      | "price0"
      | "price1"
      | "removeProvider"
      | "setState"
      | "token0"
      | "token1"
      | "updatePrice"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewOrderState"
      | "NewPrice"
      | "NewProvider"
      | "OrderClosed"
      | "OrderCommited"
      | "ProviderNewState"
      | "ProviderRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProvider",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoyalty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitOrder",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedOrders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairData", values?: undefined): string;
  encodeFunctionData(functionFragment: "price0", values?: undefined): string;
  encodeFunctionData(functionFragment: "price1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setState", values: [boolean]): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProviderData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace NewOrderStateEvent {
  export type InputTuple = [
    user: AddressLike,
    id: BigNumberish,
    order: IDexStructs.OrderStruct
  ];
  export type OutputTuple = [
    user: string,
    id: bigint,
    order: IDexStructs.OrderStructOutput
  ];
  export interface OutputObject {
    user: string;
    id: bigint;
    order: IDexStructs.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPriceEvent {
  export type InputTuple = [price: BigNumberish];
  export type OutputTuple = [price: bigint];
  export interface OutputObject {
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProviderEvent {
  export type InputTuple = [
    provider: AddressLike,
    maxBalance0: BigNumberish,
    maxBalance1: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    maxBalance0: bigint,
    maxBalance1: bigint,
    share: bigint
  ];
  export interface OutputObject {
    provider: string;
    maxBalance0: bigint;
    maxBalance1: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderClosedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCommitedEvent {
  export type InputTuple = [
    user: AddressLike,
    id: BigNumberish,
    order: IDexStructs.OrderStruct
  ];
  export type OutputTuple = [
    user: string,
    id: bigint,
    order: IDexStructs.OrderStructOutput
  ];
  export interface OutputObject {
    user: string;
    id: bigint;
    order: IDexStructs.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderNewStateEvent {
  export type InputTuple = [
    provider: AddressLike,
    state: IDexStructs.ProviderStruct
  ];
  export type OutputTuple = [
    provider: string,
    state: IDexStructs.ProviderStructOutput
  ];
  export interface OutputObject {
    provider: string;
    state: IDexStructs.ProviderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderRemovedEvent {
  export type InputTuple = [
    provider: AddressLike,
    returnedBalance0: BigNumberish,
    returnedBalance1: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    returnedBalance0: bigint,
    returnedBalance1: bigint
  ];
  export interface OutputObject {
    provider: string;
    returnedBalance0: bigint;
    returnedBalance1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenPaiV1 extends BaseContract {
  connect(runner?: ContractRunner | null): TokenPaiV1;
  waitForDeployment(): Promise<this>;

  interface: TokenPaiV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProvider: TypedContractMethod<
    [
      provider: AddressLike,
      allowedMaxBalance0: BigNumberish,
      allowedMaxBalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimRoyalty: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  closeOrder: TypedContractMethod<
    [caller: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  commitOrder: TypedContractMethod<
    [
      owner: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      timeout: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositLiquidity: TypedContractMethod<
    [prov: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOrder: TypedContractMethod<
    [id: BigNumberish],
    [IDexStructs.OrderStructOutput],
    "view"
  >;

  getProviderData: TypedContractMethod<
    [provider: AddressLike],
    [IDexStructs.ProviderStructOutput],
    "view"
  >;

  getProviders: TypedContractMethod<
    [],
    [IDexStructs.ProviderStructOutput[]],
    "view"
  >;

  getQueuedOrders: TypedContractMethod<
    [],
    [IDexStructs.OrderStructOutput[]],
    "view"
  >;

  isActive: TypedContractMethod<[], [boolean], "view">;

  pairData: TypedContractMethod<[], [IDexStructs.PairStructOutput], "view">;

  price0: TypedContractMethod<[], [bigint], "view">;

  price1: TypedContractMethod<[], [bigint], "view">;

  removeProvider: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  setState: TypedContractMethod<[state: boolean], [void], "nonpayable">;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  updatePrice: TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;

  withdrawLiquidity: TypedContractMethod<
    [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProvider"
  ): TypedContractMethod<
    [
      provider: AddressLike,
      allowedMaxBalance0: BigNumberish,
      allowedMaxBalance1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRoyalty"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeOrder"
  ): TypedContractMethod<
    [caller: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitOrder"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      timeout: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositLiquidity"
  ): TypedContractMethod<
    [prov: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [id: BigNumberish],
    [IDexStructs.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProviderData"
  ): TypedContractMethod<
    [provider: AddressLike],
    [IDexStructs.ProviderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProviders"
  ): TypedContractMethod<[], [IDexStructs.ProviderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getQueuedOrders"
  ): TypedContractMethod<[], [IDexStructs.OrderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pairData"
  ): TypedContractMethod<[], [IDexStructs.PairStructOutput], "view">;
  getFunction(
    nameOrSignature: "price0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "price1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeProvider"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setState"
  ): TypedContractMethod<[state: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [provider: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewOrderState"
  ): TypedContractEvent<
    NewOrderStateEvent.InputTuple,
    NewOrderStateEvent.OutputTuple,
    NewOrderStateEvent.OutputObject
  >;
  getEvent(
    key: "NewPrice"
  ): TypedContractEvent<
    NewPriceEvent.InputTuple,
    NewPriceEvent.OutputTuple,
    NewPriceEvent.OutputObject
  >;
  getEvent(
    key: "NewProvider"
  ): TypedContractEvent<
    NewProviderEvent.InputTuple,
    NewProviderEvent.OutputTuple,
    NewProviderEvent.OutputObject
  >;
  getEvent(
    key: "OrderClosed"
  ): TypedContractEvent<
    OrderClosedEvent.InputTuple,
    OrderClosedEvent.OutputTuple,
    OrderClosedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCommited"
  ): TypedContractEvent<
    OrderCommitedEvent.InputTuple,
    OrderCommitedEvent.OutputTuple,
    OrderCommitedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderNewState"
  ): TypedContractEvent<
    ProviderNewStateEvent.InputTuple,
    ProviderNewStateEvent.OutputTuple,
    ProviderNewStateEvent.OutputObject
  >;
  getEvent(
    key: "ProviderRemoved"
  ): TypedContractEvent<
    ProviderRemovedEvent.InputTuple,
    ProviderRemovedEvent.OutputTuple,
    ProviderRemovedEvent.OutputObject
  >;

  filters: {
    "NewOrderState(address,uint256,tuple)": TypedContractEvent<
      NewOrderStateEvent.InputTuple,
      NewOrderStateEvent.OutputTuple,
      NewOrderStateEvent.OutputObject
    >;
    NewOrderState: TypedContractEvent<
      NewOrderStateEvent.InputTuple,
      NewOrderStateEvent.OutputTuple,
      NewOrderStateEvent.OutputObject
    >;

    "NewPrice(uint256)": TypedContractEvent<
      NewPriceEvent.InputTuple,
      NewPriceEvent.OutputTuple,
      NewPriceEvent.OutputObject
    >;
    NewPrice: TypedContractEvent<
      NewPriceEvent.InputTuple,
      NewPriceEvent.OutputTuple,
      NewPriceEvent.OutputObject
    >;

    "NewProvider(address,uint256,uint256,uint256)": TypedContractEvent<
      NewProviderEvent.InputTuple,
      NewProviderEvent.OutputTuple,
      NewProviderEvent.OutputObject
    >;
    NewProvider: TypedContractEvent<
      NewProviderEvent.InputTuple,
      NewProviderEvent.OutputTuple,
      NewProviderEvent.OutputObject
    >;

    "OrderClosed(uint256)": TypedContractEvent<
      OrderClosedEvent.InputTuple,
      OrderClosedEvent.OutputTuple,
      OrderClosedEvent.OutputObject
    >;
    OrderClosed: TypedContractEvent<
      OrderClosedEvent.InputTuple,
      OrderClosedEvent.OutputTuple,
      OrderClosedEvent.OutputObject
    >;

    "OrderCommited(address,uint256,tuple)": TypedContractEvent<
      OrderCommitedEvent.InputTuple,
      OrderCommitedEvent.OutputTuple,
      OrderCommitedEvent.OutputObject
    >;
    OrderCommited: TypedContractEvent<
      OrderCommitedEvent.InputTuple,
      OrderCommitedEvent.OutputTuple,
      OrderCommitedEvent.OutputObject
    >;

    "ProviderNewState(address,tuple)": TypedContractEvent<
      ProviderNewStateEvent.InputTuple,
      ProviderNewStateEvent.OutputTuple,
      ProviderNewStateEvent.OutputObject
    >;
    ProviderNewState: TypedContractEvent<
      ProviderNewStateEvent.InputTuple,
      ProviderNewStateEvent.OutputTuple,
      ProviderNewStateEvent.OutputObject
    >;

    "ProviderRemoved(address,uint256,uint256)": TypedContractEvent<
      ProviderRemovedEvent.InputTuple,
      ProviderRemovedEvent.OutputTuple,
      ProviderRemovedEvent.OutputObject
    >;
    ProviderRemoved: TypedContractEvent<
      ProviderRemovedEvent.InputTuple,
      ProviderRemovedEvent.OutputTuple,
      ProviderRemovedEvent.OutputObject
    >;
  };
}
