/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DistributerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SPLIT_PERCENTAGE"
      | "SPLIT_PERCENTAGE_DENOMINATOR"
      | "primaryOwner"
      | "primaryTreasure"
      | "secondaryOwner"
      | "secondaryTreasure"
      | "setPrimaryTreasure"
      | "setSecondaryTreasure"
      | "transferPrimaryOwnership"
      | "transferSecondaryOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Distributed"
      | "PrimaryOwnershipTransferred"
      | "PrimaryTreasureUpdated"
      | "SecondaryOwnershipTransferred"
      | "SecondaryTreasureUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "SPLIT_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPLIT_PERCENTAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryTreasure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryTreasure",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryTreasure",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryTreasure",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPrimaryOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSecondaryOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "SPLIT_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPLIT_PERCENTAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPrimaryOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSecondaryOwnership",
    data: BytesLike
  ): Result;
}

export namespace DistributedEvent {
  export type InputTuple = [
    token: AddressLike,
    total: BigNumberish,
    toPrimary: BigNumberish,
    toSecondary: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    total: bigint,
    toPrimary: bigint,
    toSecondary: bigint
  ];
  export interface OutputObject {
    token: string;
    total: bigint;
    toPrimary: bigint;
    toSecondary: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimaryOwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimaryTreasureUpdatedEvent {
  export type InputTuple = [oldTreasure: AddressLike, newTreasure: AddressLike];
  export type OutputTuple = [oldTreasure: string, newTreasure: string];
  export interface OutputObject {
    oldTreasure: string;
    newTreasure: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecondaryOwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecondaryTreasureUpdatedEvent {
  export type InputTuple = [oldTreasure: AddressLike, newTreasure: AddressLike];
  export type OutputTuple = [oldTreasure: string, newTreasure: string];
  export interface OutputObject {
    oldTreasure: string;
    newTreasure: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Distributer extends BaseContract {
  connect(runner?: ContractRunner | null): Distributer;
  waitForDeployment(): Promise<this>;

  interface: DistributerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SPLIT_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  SPLIT_PERCENTAGE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  primaryOwner: TypedContractMethod<[], [string], "view">;

  primaryTreasure: TypedContractMethod<[], [string], "view">;

  secondaryOwner: TypedContractMethod<[], [string], "view">;

  secondaryTreasure: TypedContractMethod<[], [string], "view">;

  setPrimaryTreasure: TypedContractMethod<
    [newPrimaryTreasure: AddressLike],
    [void],
    "nonpayable"
  >;

  setSecondaryTreasure: TypedContractMethod<
    [newSecondaryTreasure: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPrimaryOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferSecondaryOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SPLIT_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SPLIT_PERCENTAGE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "primaryOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primaryTreasure"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "secondaryOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "secondaryTreasure"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPrimaryTreasure"
  ): TypedContractMethod<
    [newPrimaryTreasure: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSecondaryTreasure"
  ): TypedContractMethod<
    [newSecondaryTreasure: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferPrimaryOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferSecondaryOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "PrimaryOwnershipTransferred"
  ): TypedContractEvent<
    PrimaryOwnershipTransferredEvent.InputTuple,
    PrimaryOwnershipTransferredEvent.OutputTuple,
    PrimaryOwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrimaryTreasureUpdated"
  ): TypedContractEvent<
    PrimaryTreasureUpdatedEvent.InputTuple,
    PrimaryTreasureUpdatedEvent.OutputTuple,
    PrimaryTreasureUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SecondaryOwnershipTransferred"
  ): TypedContractEvent<
    SecondaryOwnershipTransferredEvent.InputTuple,
    SecondaryOwnershipTransferredEvent.OutputTuple,
    SecondaryOwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SecondaryTreasureUpdated"
  ): TypedContractEvent<
    SecondaryTreasureUpdatedEvent.InputTuple,
    SecondaryTreasureUpdatedEvent.OutputTuple,
    SecondaryTreasureUpdatedEvent.OutputObject
  >;

  filters: {
    "Distributed(address,uint256,uint256,uint256)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "PrimaryOwnershipTransferred(address,address)": TypedContractEvent<
      PrimaryOwnershipTransferredEvent.InputTuple,
      PrimaryOwnershipTransferredEvent.OutputTuple,
      PrimaryOwnershipTransferredEvent.OutputObject
    >;
    PrimaryOwnershipTransferred: TypedContractEvent<
      PrimaryOwnershipTransferredEvent.InputTuple,
      PrimaryOwnershipTransferredEvent.OutputTuple,
      PrimaryOwnershipTransferredEvent.OutputObject
    >;

    "PrimaryTreasureUpdated(address,address)": TypedContractEvent<
      PrimaryTreasureUpdatedEvent.InputTuple,
      PrimaryTreasureUpdatedEvent.OutputTuple,
      PrimaryTreasureUpdatedEvent.OutputObject
    >;
    PrimaryTreasureUpdated: TypedContractEvent<
      PrimaryTreasureUpdatedEvent.InputTuple,
      PrimaryTreasureUpdatedEvent.OutputTuple,
      PrimaryTreasureUpdatedEvent.OutputObject
    >;

    "SecondaryOwnershipTransferred(address,address)": TypedContractEvent<
      SecondaryOwnershipTransferredEvent.InputTuple,
      SecondaryOwnershipTransferredEvent.OutputTuple,
      SecondaryOwnershipTransferredEvent.OutputObject
    >;
    SecondaryOwnershipTransferred: TypedContractEvent<
      SecondaryOwnershipTransferredEvent.InputTuple,
      SecondaryOwnershipTransferredEvent.OutputTuple,
      SecondaryOwnershipTransferredEvent.OutputObject
    >;

    "SecondaryTreasureUpdated(address,address)": TypedContractEvent<
      SecondaryTreasureUpdatedEvent.InputTuple,
      SecondaryTreasureUpdatedEvent.OutputTuple,
      SecondaryTreasureUpdatedEvent.OutputObject
    >;
    SecondaryTreasureUpdated: TypedContractEvent<
      SecondaryTreasureUpdatedEvent.InputTuple,
      SecondaryTreasureUpdatedEvent.OutputTuple,
      SecondaryTreasureUpdatedEvent.OutputObject
    >;
  };
}
